DEFINITION MODULE BTRV;

(* ------------------------------------------------------------------------ *)
(* TopSpeed Modula-2 Interface for BTRIEVE - Supports TopSpeed Extender     *)
(* Public Domain - May be used without restriction                          *)
(*                                                                          *)
(* VersiÂ¢n para MYLIB 2.0                                                   *)
(* (c) 1994.                                                                *)
(* Ver    : 1.00.                                                           *)
(* Release: 1000.0.                                                         *)
(* Date   : 19-05-94.                                                       *)
(* By     : Hector Gustavo Saracca.                                         *)
(* ------------------------------------------------------------------------ *)

TYPE File      = ARRAY [ 0..127 ] OF BYTE;      (* File Control Block *)
     KeyType   = ARRAY [ 0..255 ] OF CHAR;
     OwnerType = ARRAY [ 0..  7 ] OF CHAR;
     FileName  = ARRAY [ 0.. 79 ] OF CHAR;      (* 79 + blank pad     *)

CONST MaxKeys  = 23;
TYPE  KeyRange = [ 0..MaxKeys ];

CONST

(* ------------------------------------------------------------------------ *)
(*     Key Attributes            Key Types          Open Modes              *)
(* ------------------------------------------------------------------------ *)
     Duplicates   =   1;     TString    =  0;     Normal    = SHORTCARD(  0);
     Modifiable   =   2;     TInteger   =  1;     Accel     = SHORTCARD(254);
     Binary       =   4;     TFloat     =  2;     ReadOnly  = SHORTCARD(253);
     AllowNull    =   8;     TDate      =  3;     Verify    = SHORTCARD(252);
     Segmented    =  16;     TTime      =  4;     Exclusive = SHORTCARD(251);
     AltCol       =  32;     TDecimal   =  5;
     Descending   =  64;     TMoney     =  6;
     Supplemental = 128;     TLogical   =  7;
     ExtType      = 256;     TNumeric   =  8;
     Manual       = 512;     TBFloat    =  9;
                             TLString   = 10;
                             TZString   = 11;
                             TUnsBinary = 14;
                             TAutoInc   = 15;

(* ------------------------------------------------------------------------ *)
(* Lock Constants.                                                          *)
(* ------------------------------------------------------------------------ *)

  NoLock             =   0;   (* Lock types *)
  SingleWait         = 100;
  SingleNoWait       = 200;
  MultipleWait       = 300;
  MultipleNoWait     = 400;

(* ------------------------ *)
(*        File Flags        *)
(* ------------------------ *)
     VarLength   =   1;
     BlankTrunc  =   2;
     PreAllocate =   4;
     DataComp    =   8;
     KeyOnly     =  16;
     Free10      =  64;
     Free20      = 128;
     Free30      = 192;

(* ------------------------------------------------------------------------ *)
(* Extended Ops Comp Codes/Bias            Extended Ops Logic Constants     *)
(* ------------------------------------------------------------------------ *)
   Equal       = BYTE(  1);                NoFilter    = BYTE(0);
   GreaterThan = BYTE(  2);                LastTerm    = BYTE(0);
   LessThan    = BYTE(  3);                NextTermAnd = BYTE(1);
   NotEqual    = BYTE(  4);                NextTermOr  = BYTE(2);
   GrOrEqual   = BYTE(  5);
   LessOrEqual = BYTE(  6);
   UseAltColl  = BYTE( 32);
   UseField    = BYTE( 64);
   UseNoCase   = BYTE(128);

   RJustify           = 1;        (* String justification types *)
   LJustify           = 2;

   NoOverWrite        = -1;       (* File create mode *)

   ReadAccess         = 1;        (* File owner access modes *)
   WriteAccessEncrypt = 2;
   ReadAccessEncrypt  = 3;


(* --------------------------------- *)
(*   Other Unit-Specific Constants   *)
(* --------------------------------- *)
   Zero         = SHORTCARD(0);
   NotRequired  = SHORTCARD(0);
   MaxRecSize   =  4090;       (* Btrieve limits fixed record length for std*)
   MaxKeySize   =   255;       (* files to 4090.  Max key size is 255.      *)

TYPE AltColSpec = RECORD           (* The data types for alternate collating *)
        Header :BYTE;              (* Header always equals 0ACH              *)
        Name   :ARRAY [ 1..  8 ] OF CHAR;
        Table  :ARRAY [ 1..256 ] OF CHAR;
     END;
     KeySpec = RECORD
        KeyPos     :CARDINAL;
        KeyLen     :CARDINAL;
        KeyFlags   :CARDINAL;                   (* Tho not used in a  *)
        NotUsed    :ARRAY [ 0..3 ] OF BYTE;     (* create call, these *)
        ExtKeyType :BYTE;                       (* 4 bytes return #   *)
        NullValue  :BYTE;                       (* unique recs in key *)
        Reserved   :ARRAY [ 0.. 3 ] OF BYTE;    (* after a stat call. *)
     END; (* KeySpec *)
     NumUniqueType = RECORD
        Irrelevant :ARRAY [ 1..3 ] OF CARDINAL;
        NumUnique  :LONGCARD;      (* great after a stat call! *)
     END; (* NumUniqueType *)
     KeyArrayType = ARRAY KeyRange OF KeySpec;
     FileSpec = RECORD             (* Strictly speaking, the KeyArray *)
        RecSize    :CARDINAL;      (* only serve to reserve space for *)
        PageSize   :CARDINAL;      (* the buffer.                     *)
        NumKeys    :CARDINAL;
        NumRecs    :LONGCARD;
        FileFlags  :CARDINAL;
        Reserved   :ARRAY [ 0..1 ] OF CHAR;
        PreAlloc   :CARDINAL;
        KeyArray   :KeyArrayType;  (* 24=max # segs *)
        AltColSpec :AltColSpec;    (* here just to allow room *)
     END; (* FileSpec *)
     PosType = ARRAY [ 0..1 ] OF CARDINAL;

TYPE CharArrayType = ARRAY [ 0..255 ] OF CHAR;
     LogicType = RECORD
        FieldType  :BYTE;
        FieldLen   :CARDINAL;
        Offset     :CARDINAL;   (* 0 relative TO start of record *)
        CompCode   :BYTE;
        Expression :BYTE;       (* 0 "Last" term, 1 "And" next, 2 "Or" next *)
        CASE FieldComp :BOOLEAN OF
           TRUE  : CompOffset :CARDINAL;      |
           FALSE : Value      :CharArrayType;
        END; (* case *)
     END; (* LogicType *)

(* ------------------------------------------------------------------------ *)
(* Btrieve file functions - function number in brackets                     *)
(* ------------------------------------------------------------------------ *)

PROCEDURE Open  ( FileName, OwnerName :ARRAY OF CHAR; OpenMode :SHORTCARD ) :File;
PROCEDURE Create( FileName :ARRAY OF CHAR; FileDesc :ARRAY OF BYTE; DescSize :CARDINAL ) :File;
PROCEDURE Close( VAR f :File );

PROCEDURE Status( VAR f :File; VAR DatBuff :ARRAY OF BYTE; VAR BuffSize :CARDINAL; VAR KeyBuff :ARRAY OF BYTE );
PROCEDURE Extend( VAR f :File; FileName :ARRAY OF CHAR; UseNow :BOOLEAN );

PROCEDURE SetOwner( VAR f :File; OwnerName :ARRAY OF CHAR; AccessMode :SHORTCARD );
PROCEDURE ClearOwner( VAR f :File );

(* Open a file with given file name in given mode            (#00) *)
(* Close a file                                              (#01) *)
(* Create a file                                             (#14) *)
(* Return file information for given file                    (#15) *)
(* Extend a file to a second logical disk drive              (#16) *)
(* Set owner name and subsequent access rights on given file (#29) *)
(* Remove owner name associated with file                    (#30) *)

(* ------------------------------------------------------------------------ *)
(* Btrieve transactions functions - function number in brackets             *)
(* ------------------------------------------------------------------------ *)

PROCEDURE BeginTransaction();
PROCEDURE EndTransaction();
PROCEDURE AbortTransaction();

(* Mark beginning of a set of file operations                     (#19) *)
(* Mark the end of a set of related file operations               (#20) *)
(* Terminate transaction and abort all associated file operations (#21) *)

(* ------------------------------------------------------------------------ *)
(* Btrieve records functions - function number in brackets                  *)
(* ------------------------------------------------------------------------ *)

PROCEDURE Insert( VAR f :File; VAR DatBuff :ARRAY OF BYTE; VAR BuffSize :CARDINAL; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );
PROCEDURE Update( VAR f :File; VAR DatBuff :ARRAY OF BYTE; VAR BuffSize :CARDINAL; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );
PROCEDURE Delete( VAR f :File; KeyID :SHORTCARD );
PROCEDURE GetPos( VAR f :File; VAR pos :PosType );
PROCEDURE GetDirect ( VAR f :File; VAR DatBuff :ARRAY OF BYTE; VAR BuffSize :CARDINAL; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );
PROCEDURE StepDirect( VAR f :File; VAR DatBuff :ARRAY OF BYTE; VAR BuffSize :CARDINAL );

(* Add record with given key value               (#02) *)
(* Update a previously retrieved record          (#03) *)
(* Delete a record from a file                   (#04) *)
(* Return physical record position in given file (#22) *)
(* Get a record by physical address              (#23) *)
(* Move to next physical record in file          (#24) *)

PROCEDURE FindEQ  ( VAR f :File; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );
PROCEDURE FindNext( VAR f :File; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );
PROCEDURE FindPrev( VAR f :File; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );
PROCEDURE FindGT  ( VAR f :File; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );
PROCEDURE FindGE  ( VAR f :File; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );
PROCEDURE FindLT  ( VAR f :File; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );
PROCEDURE FindLE  ( VAR f :File; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );
PROCEDURE FindFirst(VAR f :File; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );
PROCEDURE FindLast( VAR f :File; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );

(* Find record with key value equal    to given key               (#55) *)
(* Find record with next key value     for given key              (#56) *)
(* Find record with previous key value for given key              (#57) *)
(* Find record with key value greater  than given key             (#58) *)
(* Find record with key value greater  than or equal to given key (#59) *)
(* Find record with key value lower    than given key             (#60) *)
(* Find record with key value less     than or equal to given key (#61) *)
(* Find record with lowest key value   for given key              (#62) *)
(* Find record with highest key value  for given key              (#63) *)

PROCEDURE GetEQ  ( VAR f :File; VAR DatBuff :ARRAY OF BYTE; VAR BuffSize :CARDINAL; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );
PROCEDURE GetNext( VAR f :File; VAR DatBuff :ARRAY OF BYTE; VAR BuffSize :CARDINAL; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );
PROCEDURE GetPrev( VAR f :File; VAR DatBuff :ARRAY OF BYTE; VAR BuffSize :CARDINAL; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );
PROCEDURE GetGT  ( VAR f :File; VAR DatBuff :ARRAY OF BYTE; VAR BuffSize :CARDINAL; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );
PROCEDURE GetGE  ( VAR f :File; VAR DatBuff :ARRAY OF BYTE; VAR BuffSize :CARDINAL; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );
PROCEDURE GetLT  ( VAR f :File; VAR DatBuff :ARRAY OF BYTE; VAR BuffSize :CARDINAL; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );
PROCEDURE GetLE  ( VAR f :File; VAR DatBuff :ARRAY OF BYTE; VAR BuffSize :CARDINAL; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );
PROCEDURE GetFirst(VAR f :File; VAR DatBuff :ARRAY OF BYTE; VAR BuffSize :CARDINAL; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );
PROCEDURE GetLast( VAR f :File; VAR DatBuff :ARRAY OF BYTE; VAR BuffSize :CARDINAL; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );

(*  Get record with key value equal     to given key               (#05) *)
(*  Get record with next key value      for given key              (#06) *)
(*  Get record with previous key value  for given key              (#07) *)
(*  Get record with key value greater   than given key             (#08) *)
(*  Get record with key value greater   than or equal to given key (#09) *)
(*  Get record with key value lower     than given key             (#10) *)
(*  Get record with key value less      than or equal to given key (#11) *)
(*  Get record with lowest key value    for given key              (#12) *)
(*  Get record with highest key value   for given key              (#13) *)

(* ------------------------------------------------------------------------ *)
(* Btrieve general functions - function number in brackets                  *)
(* ------------------------------------------------------------------------ *)

PROCEDURE Reset();
PROCEDURE Stop();

PROCEDURE SetDirectory( dir :ARRAY OF CHAR );
PROCEDURE GetDir( drv :SHORTCARD; VAR dir :ARRAY OF CHAR );

(* Remove Btrieve file manager from memory        (#25) *)
(* Release all resources and close all open files (#28) *)
(* Set current directory to given name            (#17) *)
(* Get current directory for drive                (#28) *)

(* ------------------------------------------------------------------------ *)
(* Nuevas funciones de ExtracciÂ¢n de datos.                                 *)
(* (c) 1994                                                                 *)
(* Implemetadas por: Saracca, Hâctor Gustavo.                               *)
(* ------------------------------------------------------------------------ *)

PROCEDURE StepFirst  ( f :File; VAR DatBuff :ARRAY OF BYTE; VAR BuffSize :CARDINAL; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );
PROCEDURE StepLast   ( f :File; VAR DatBuff :ARRAY OF BYTE; VAR BuffSize :CARDINAL; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );
PROCEDURE StepPrev   ( f :File; VAR DatBuff :ARRAY OF BYTE; VAR BuffSize :CARDINAL; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );
PROCEDURE GetNextExt ( f :File; VAR DatBuff :ARRAY OF BYTE; VAR BuffSize :CARDINAL; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );
PROCEDURE GetPrevExt ( f :File; VAR DatBuff :ARRAY OF BYTE; VAR BuffSize :CARDINAL; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );
PROCEDURE StepNextExt( f :File; VAR DatBuff :ARRAY OF BYTE; VAR BuffSize :CARDINAL; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );
PROCEDURE StepPrevExt( f :File; VAR DatBuff :ARRAY OF BYTE; VAR BuffSize :CARDINAL; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );
PROCEDURE InsertExt  ( f :File; VAR DatBuff :ARRAY OF BYTE; VAR BuffSize :CARDINAL; VAR KeyBuff :ARRAY OF BYTE; KeyID :SHORTCARD );

(* ------------------------------------------------------------------------ *)
(* Low level interface to btrieve                                           *)
(* ------------------------------------------------------------------------ *)

CONST op_Open        = 0;  op_Close         = 1;  op_Insert      = 2;
      op_Update      = 3;  op_Delete        = 4;  op_GetEQ       = 5;
      op_GetNext     = 6;  op_GetPrev       = 7;  op_GetGT       = 8;
      op_GetGE       = 9;  op_GetLT         = 10; op_GetLE       = 11;
      op_GetFirst    = 12; op_GetLast       = 13; op_Create      = 14;
      op_Stat        = 15; op_Extend        = 16; op_SetDir      = 17;
      op_GetDir      = 18; op_BeginTrans    = 19; op_EndTrans    = 20;
      op_AbortTrans  = 21; op_GetPos        = 22; op_GetDirect   = 23;
      op_StepDirect  = 24; op_Stop          = 25; op_Version     = 26;
      op_Unlock      = 27; op_Reset         = 28; op_SetOwner    = 29;
      op_ClearOwner  = 30; op_CreateSuppIdx = 31; op_DropSuppIdx = 32;
      op_StepFirst   = 33; op_StepLast      = 34; op_StepPrev    = 35;
      op_GetNextExt  = 36; op_GetPrevExt    = 37; op_StepNextExt = 38;
      op_StepPrevExt = 39; op_InsertExt     = 40;

      op_KeyOnly     = 50;  (* 'Get???? + op_KeyOnly': Add ops 5..13 only ! *)

      op_Null        = MAX(CARDINAL);

PROCEDURE BTrieve(     op      :CARDINAL;        (* Operation          *)
                   VAR pos     :File;            (* Position Block     *)
                   VAR data    :ARRAY OF BYTE;   (* Data Buffer        *)
                   VAR datalen :CARDINAL;        (* Data Size          *)
                   VAR kbuf    :ARRAY OF BYTE;   (* Key Buffer         *)
                       key     :SHORTCARD );     (* Key Number         *)

(* ------------------------------------------------------------------------ *)
(* Errores del BTrieve                                                      *)
(* ------------------------------------------------------------------------ *)

TYPE ErrorType = (
 (*  0 *)  Ok,BadOpcode,IOError,NoOpen,KeyNotFound,
 (*  5 *)  DuplicateKey,InvalidKey,ChangedKey,InvalidPosition,EndOfFile,
 (* 10 *)  NonModifiable,BadFileName,FileNotFound,ExtensionError,PreOpenError,
 (* 15 *)  PreImageError,ExpansionError,CloseError,DiskFull,Unrecoverable,
 (* 20 *)  BtrieveAbsent,KeyBuffSize,RecBuffSize,PosBlockSize,PageSize,
 (* 25 *)  CreateError,KeySegments,KeyPosition,RecSize,KeySize,
 (* 30 *)  NotBtrieveFile,AlreadyExtended,CantExtend,Err33,BadExtendName,
 (* 35 *)  DirectoryError,TransactError,NestedTransact,TransactControl,EndAbortError,
 (* 40 *)  TransactMaximum,TransactFileErr,AccelFailure,BadRecAddress,NullKeyPath,
 (* 45 *)  BadKeySpecs,AccessDenied,MaxOpenFiles,BadCollation,CollationKeyType,
 (* 50 *)  OwnerSet,InvalidOwner,CacheWriteError,BadBtInterface,BadVariablePage,
 (* 55 *)  AutoIncErr, IncompleteIndex, EMSErr, CompressBufTooShort,FileAlreadyExists,
 (* 60 *)  Err60,Err61,Err62,Err63,Err64,
 (* 65 *)  Err65,Err66,Err67,Err68,Err69,
 (* 70 *)  Err70,Err71,Err72,Err73,Err74,
 (* 75 *)  Err75,Err76,Err77,Err78,Err79,
 (* 80 *)  AccessConflict,LockFailed,LostPosition,UnreadTransact,RecInUse,
 (* 85 *)  FileInUse,FileTableFull,HandleTableFull,OpenModeError,DeviceNameError,
 (* 90 *)  DeviceTableFull,ServerError,TransactTabFull,IncompatibleLockType,PermissionErr,
 (* 99 *)  SessionNoLongerValid, ComEnvErr,DataBufTooSmall,InternalTransactionErr, DemoVersion );

PROCEDURE SetError( op :CARDINAL; err :ErrorType );
PROCEDURE GetError() :ErrorType;

PROCEDURE SetAbort( on :BOOLEAN );

PROCEDURE WrError( op :CARDINAL; err :ErrorType );

PROCEDURE GetVer( VAR str :ARRAY OF CHAR );

(* ------------------------------------------------------------------------ *)
(* Procedimientos varios de manejo de archivos BTrieve.                     *)
(* ------------------------------------------------------------------------ *)

PROCEDURE InitSpecs(     rec_size  :CARDINAL;
                         file_flgs :CARDINAL;
                         page_size :CARDINAL;
                         pre_alloc :CARDINAL;
                         keys      :ARRAY OF KeySpec;
                     VAR num_segs  :CARDINAL ) :FileSpec;

TYPE BFile;
(* Opaque type de archivos de BTRIEVE   *)
(* Oculta: el tipo PosType              *)
(*         el current record            *)
(*         ProtecciÂ¢n por Transacciones *)

PROCEDURE BCreate( name :ARRAY OF CHAR; specs     :FileSpec  ) :BFile;
PROCEDURE BOpen  ( name :ARRAY OF CHAR; open_mode :SHORTCARD ) :BFile;
PROCEDURE BClose ( VAR f :BFile );

PROCEDURE SUpdate( VAR f :BFile );
PROCEDURE SetIDX ( VAR f :BFile; index :KeyRange );
PROCEDURE GetSpec( VAR f :BFile ) :FileSpec;

PROCEDURE BRecords( VAR f :BFile ) :LONGCARD;
PROCEDURE BGetPos ( VAR f :BFile ) :LONGCARD;

PROCEDURE BAdd ( VAR f :BFile; VAR d :ARRAY OF BYTE ) :LONGCARD;
PROCEDURE BGet ( VAR f :BFile; i :LONGCARD; VAR d :ARRAY OF BYTE );
PROCEDURE BPut ( VAR f :BFile; i :LONGCARD; VAR d :ARRAY OF BYTE );
PROCEDURE BDel ( VAR f :BFile; i :LONGCARD );
PROCEDURE BSrch( VAR f :BFile;     srch :ARRAY OF BYTE;
                               VAR pos  :LONGCARD;
                               VAR d    :ARRAY OF BYTE ) :BOOLEAN;
PROCEDURE BGetFirst( VAR f :BFile; VAR pos :LONGCARD; VAR d :ARRAY OF BYTE );
PROCEDURE BGetNext ( VAR f :BFile; VAR pos :LONGCARD; VAR d :ARRAY OF BYTE );

TYPE CopyMode = ( None, Drop, Retain );

PROCEDURE CopyFile( source, target :ARRAY OF CHAR; mode :CopyMode );

END BTRV.
